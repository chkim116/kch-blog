[{"content":"비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되어야겠다고 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은 건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면, 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월로 보냈다 하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느 정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌 걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 되기로 마음먹은 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10km 마라톤 대회를 친구와 나갔다. 두 번째 대회였다. 첫 번째 대회에는 56분 47초에 완주했다. 두 번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록이다. 결과만 봐도 정말 열심히 달렸겠구나 싶은데, 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만두고 싶을 때, 너무 힘들 때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을 때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는 것 같은데 속도를 좀 늦출까? 이미 55분 언더 될 것 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을 것 같았지만 이를 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 발휘할 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기보다는 낯선 개념이다. 보통 괴로움을 겪는 건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일이다. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될 때면 더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을 때의 나는 무엇이든 뚝딱 만들어낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼게 될 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁힐 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이를 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제가 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고, 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야 할까? 진부하지만 연습하고 연습하고 또 연습해야 한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork) 교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느 정도는 익혀놔야 후에 협업을 할 때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들 테지만 나머지 10에 대한 디테일은 결국 사람이 해야 한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야 한다고 말한다. 누구는 웹접근성도 배워야 한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Angular도 알아야 할 것 같고, Svelte도 배워야 할 것 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야 하고 OOP도 이야기 가능하게 닦아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야 할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 길이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했으며 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안 된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않고 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느 정도 할 수 있는지 어빌리티를 보는 게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느 정도까지 하는 게 맞는 것인지? 이 정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느 정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느 정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를 들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을 때 합리화하지 마라. 당신이 개발자가 되기로 결심했다면 이 세 가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되어야겠다고 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되어야겠다고 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은 건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면, 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월로 보냈다 하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느 정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌 걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 되기로 마음먹은 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10km 마라톤 대회를 친구와 나갔다. 두 번째 대회였다. 첫 번째 대회에는 56분 47초에 완주했다. 두 번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록이다. 결과만 봐도 정말 열심히 달렸겠구나 싶은데, 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만두고 싶을 때, 너무 힘들 때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을 때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는 것 같은데 속도를 좀 늦출까? 이미 55분 언더 될 것 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을 것 같았지만 이를 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 발휘할 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기보다는 낯선 개념이다. 보통 괴로움을 겪는 건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일이다. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될 때면 더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을 때의 나는 무엇이든 뚝딱 만들어낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼게 될 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁힐 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이를 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제가 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고, 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야 할까? 진부하지만 연습하고 연습하고 또 연습해야 한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork) 교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느 정도는 익혀놔야 후에 협업을 할 때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들 테지만 나머지 10에 대한 디테일은 결국 사람이 해야 한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야 한다고 말한다. 누구는 웹접근성도 배워야 한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Angular도 알아야 할 것 같고, Svelte도 배워야 할 것 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야 하고 OOP도 이야기 가능하게 닦아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야 할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 길이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했으며 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안 된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않고 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느 정도 할 수 있는지 어빌리티를 보는 게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느 정도까지 하는 게 맞는 것인지? 이 정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느 정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느 정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를 들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을 때 합리화하지 마라. 당신이 개발자가 되기로 결심했다면 이 세 가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되어야겠다고 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되어야겠다고 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은 건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면, 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월로 보냈다 하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느 정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌 걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 되기로 마음먹은 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10km 마라톤 대회를 친구와 나갔다. 두 번째 대회였다. 첫 번째 대회에는 56분 47초에 완주했다. 두 번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록이다. 결과만 봐도 정말 열심히 달렸겠구나 싶은데, 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만두고 싶을 때, 너무 힘들 때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을 때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는 것 같은데 속도를 좀 늦출까? 이미 55분 언더 될 것 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을 것 같았지만 이를 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 발휘할 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기보다는 낯선 개념이다. 보통 괴로움을 겪는 건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일이다. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될 때면 더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을 때의 나는 무엇이든 뚝딱 만들어낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼게 될 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁힐 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이를 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제가 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고, 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야 할까? 진부하지만 연습하고 연습하고 또 연습해야 한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork) 교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느 정도는 익혀놔야 후에 협업을 할 때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들 테지만 나머지 10에 대한 디테일은 결국 사람이 해야 한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야 한다고 말한다. 누구는 웹접근성도 배워야 한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Angular도 알아야 할 것 같고, Svelte도 배워야 할 것 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야 하고 OOP도 이야기 가능하게 닦아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야 할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 길이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했으며 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안 된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않고 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느 정도 할 수 있는지 어빌리티를 보는 게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느 정도까지 하는 게 맞는 것인지? 이 정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느 정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느 정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를 들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을 때 합리화하지 마라. 당신이 개발자가 되기로 결심했다면 이 세 가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되어야겠다고 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되어야겠다고 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은 건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면, 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월로 보냈다 하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느 정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌 걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 되기로 마음먹은 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10km 마라톤 대회를 친구와 나갔다. 두 번째 대회였다. 첫 번째 대회에는 56분 47초에 완주했다. 두 번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록이다. 결과만 봐도 정말 열심히 달렸겠구나 싶은데, 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만두고 싶을 때, 너무 힘들 때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을 때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는 것 같은데 속도를 좀 늦출까? 이미 55분 언더 될 것 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을 것 같았지만 이를 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 발휘할 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기보다는 낯선 개념이다. 보통 괴로움을 겪는 건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일이다. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될 때면 더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을 때의 나는 무엇이든 뚝딱 만들어낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼게 될 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁힐 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이를 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제가 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고, 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야 할까? 진부하지만 연습하고 연습하고 또 연습해야 한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork) 교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느 정도는 익혀놔야 후에 협업을 할 때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들 테지만 나머지 10에 대한 디테일은 결국 사람이 해야 한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야 한다고 말한다. 누구는 웹접근성도 배워야 한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Angular도 알아야 할 것 같고, Svelte도 배워야 할 것 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야 하고 OOP도 이야기 가능하게 닦아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야 할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 길이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했으며 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안 된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않고 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느 정도 할 수 있는지 어빌리티를 보는 게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느 정도까지 하는 게 맞는 것인지? 이 정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느 정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느 정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를 들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을 때 합리화하지 마라. 당신이 개발자가 되기로 결심했다면 이 세 가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되어야겠다고 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로써 프론트엔드 개발자가 되어야겠다고 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로써 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로써 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까? 진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에 비전공자와 전공자는 차이가 있을까?\n진리의 사바사겠지만, 안타깝게도 현실을 바라본다면 차이가 있을 수 밖에 없다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만,  현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮다는 건 사실이지만 아예 필요하지 않은건 아니다. 네트워크 개념, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 등에 대한 지식이 있고 없고는 개발 진행에 있어 큰 차이를 일으킨다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 전혀 필요 없는 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 개발 진행에서 큰 차이를 만든다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 전혀 필요 없는 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 개발 진행에서 큰 차이를 만든다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 개발 진행에서 큰 차이를 만든다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 개발 진행에서 큰 차이를 만든다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 큰 차이를 만든다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 큰 차이를 만든다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터에 관심이 많아 컴퓨터공학에 대해 일가견이 있는 경우가 아니라면 보통의 상황에서 전공자보다 컴퓨터 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 떨어질 수 밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 당연한 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 사실이다. 왜냐하면 전공자는 4년이라는 시간을 허송세월을 보냈다하더라도 무의식 중에 익혀지는 기본값이 있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 사실이다. 전공자는 4년 동안 배우면서 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 사실이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 사실이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 경력이 쌓이면 격차는 줄어든다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 경력이 쌓이면 격차는 줄어든다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다.\n어느정도 경력이 쌓인 뒤에는 그 차이가 점점 좁혀진다. 시간이 지나면 전공이라는 게 중요한 조건이 아닌걸 깨닫게 된다. 오히려 개발에 대한 열정, 사고하는 문제 해결 능력이 중요하다. 그러나 처음 개발자가 마음 먹기로 한 지금은 다르다. 당신은 전공자와 4년의 격차를 두고 시험에 드는 아마추어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기하기엔 이르다. 나도 비전공자지만 개발을 업으로 삼고 있다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 하등 없었지만 잘 취업했고 업무를 진행하는 데에도 무리가 없었다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자도 꼭 전공자만 있는 게 아니니 혹시나 비전공자라는 사실에 개발자가 되기 망설여지는 사람이라면 이 글을 보길 바란다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지 말라고 말하고 싶다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지 말라 말하고 싶다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라 말하고 싶다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신.\n프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까?\n진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 하지만 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10KM 마라톤 대회를 친구와 나갔다. 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10KM 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회에는 56분 47초에 완주했다. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10KM 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회인 만큼 기록 단축을 위해 열의에 불탔고 55분 언더로 내려오고자 했다. 이전 기록이 47분이었던 친구와 함께 뛰게 됐다. 내 기록은 50분 27초였다. 무려 6분이 단축된 기록. 결과만 봐도 정말 열심히 달렸겠구나 싶은데 정말로 죽을 힘을 다해 달렸다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10KM 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다.\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점\n달리기 속에서 느낀 것이 있다. 인간은 그만 두고 싶을때, 너무 힘들때 자기 합리화를 통해 포기하도록 스스로를 유도한다는 것이다. 7km 지점 숨이 턱까지 차올랐을때, 자꾸만 속으로 변명 거리를 대기 시작했다. 내가 느리게 뛰어도 되는 이유를 찾았다.\n앞에 사람이 많아서 속도를 못내. 배가 조금 아파오는거 같은데 속도를 좀 늦출까? 이미 55분 언더 될거 같은데 천천히 뛸까? 다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다.\n배가 조금 아픈데 속도를 늦춰야겠다.\n이미 55분 언더로 들어갈텐데 천천히 달릴까?\n앞에 사람이 많아서 속도를 못내.\n배가 조금 아파오는거 같은데 속도를 좀 늦출까?\n이미 55분 언더 될거 같은데 천천히 뛸까?\n다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었다.\n다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었다.\n다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었다.\n다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 50분 기록으로 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이\n다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이\n다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다.\n다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n다행히 친구가 계속 부추겼다. 빨리 달리라고, 할 수 있다고. 죽을거 같았지만 이 악물고 뛰니 또 뛰어지더라. 나는 거기서 합리화의 무서움을 느꼈다. 충분히 할 수 있는 능력이 있지만, 인간은 자기 자신과 타협 하려고 한다. 명심하라. 스스로가 타협하는 것 때문에 인지하고 있는 능력보다 자신의 능력을 더 못 피울 수 있다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 특히 검퓨터공학(CS) 지식, 알고리즘, 실제 코드 작성은 때때로 자괴감, 무력감을 느끼게 한다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 특히 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일은 때때로 자괴감, 무력감을 느끼게 한다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 특히 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일은 때때로 자괴감, 무력감을 느끼게 한다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 특히 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일은 때때로 자괴감, 무력감을 느끼게 한다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 특히 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일은 때때로 자괴감, 무력감을 느끼게 한다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다.\n강의 따라 코드를 작성하다, 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 특히 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일은 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다.\n강의 따라 코드를 작성하다, 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 특히 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일은 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일은 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n비전공자로서 개발을 처음 공부하기 시작한다면 어려운 개념이 많다. 어렵다기 보다는 낯선 개념이다. 보통 괴로움을 겪는건 컴퓨터 공학(CS)에 대한 지식과 알고리즘 분야, 그리고 실제 코드를 작성하는 일. 세 가지다.\n실제로 경험하면 알겠지만 숨이 턱 막히는 경험을 한다. 도무지 이해가 되지 않기 때문이다. 알고리즘 테스트를 준비하게 될때면 더더욱 그렇다. 심지어 자괴감이 드는 이들도 많다. 그래프는 뭐고 노드는 뭐고 리프는 무엇이란 말인가.\n강의를 보면서 코드를 따라 쳤을때의 나는 무엇이든 뚝딱 만들어 낼 수 있는 무소불위의 권력자였지만, 강의를 끄고 다시 코드를 치려고 하면 타이핑 하나 하지 못하는 자기 자신에 무력감을 느끼기고 할 것이다.\n다른 사람들은 저렇게 잘하는데 나는 이해가 안돼. 재능이 없나봐. 전공자와 격차를 좁혀질 순 없을 거야. 계산기도 구현 못하는데 어떻게 개발자를 해. 여기서 동기부여를 받아 정진하는 사람이라면 다행이겠지만, 괴로움에 못이겨 지친 나머지 포기하려는 사람이라면 명심하라. 마라톤도 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 본인에게는 스스로 알고 있는 능력보다 더 대단한 능력이 있다. 이 악물고 뛰어라. 그러면 결국 완주하게 된다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 막상 현업에서 가장 중요한 건 따로 있다. 그건 실제 코드를 작성하는 일이다. 실제 코드를 작성한다는 건 어떤 일인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 실제로 작성하는 일이다.\n코드를 실제로 작성한다란 무엇인가? 문제 생긴 기존 코드를 수정하고 변경하는 일, 서비스에 기능을 새롭게 추가하는 일, 안정된 서비스를 위해 테스트를 작성하는 일, 협업 간 용이한 유지보수를 위해 컨벤션과 폴더 구조를 구조화하고 통일 하는 일 등등\u0026hellip;\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 실제로 작성하는 일이다.\n코드를 실제로 작성한다란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 테스트 작성 협업을 고려한 컨벤션과 폴더 구조 정리 내 경험상, 완전한 실무 영역으로 가장 중요한 일이다.\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 실제로 작성하는 일이다.\n코드를 실제로 작성한다란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 테스트 작성 협업을 고려한 컨벤션과 폴더 구조 정리 내 경험상, 완전한 실무 영역으로 가장 중요한 일이다.\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 실제로 작성하는 일이다.\n코드를 실제로 작성한다란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 테스트 작성 협업을 고려한 컨벤션과 폴더 구조 정리 내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 어렵기도 하다.\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 실제로 작성하는 일이다.\n코드를 실제로 작성한다란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 테스트 작성 협업을 고려한 컨벤션과 폴더 구조 정리 내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다.\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 실제로 작성하는 일이다.\n코드를 실제로 작성한다란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 테스트 작성 협업을 고려한 컨벤션과 폴더 구조 정리 내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다.\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n코드를 작성한다란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 테스트 작성 협업을 고려한 컨벤션과 폴더 구조 정리 내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 테스트 작성 협업을 고려한 컨벤션과 폴더 구조 정리 내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 등 작성 협업을 고려한 컨벤션과 폴더 구조 정리 내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 등 작성 유지보수를 위한 컨벤션/구조/문서화 등 내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 등 작성 내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성 업무 일환에\n내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성 업무 일환이다.\n내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성 업무의 일환이다.\n내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전히 실무 영역이라 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 가장 낯설고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n내가 경험한 바로, 가장 중요한 일이지만 완전히 실무의 영역이라 가장 낯설다. CS는 개념이라 암기하면 되고 알고리즘은 수학과 가까워 하나의 문제를 푸는 방식에 대한 학문적 공부에 가깝다. 실제 코드를 작성하는 일은 기술적 영역이다. 하나의 문제로 보이지만 실제론 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다.\n실제 코드를 작성하는 능력을 키우기 위해서는 어떻게 해야할까? 진부하지만 연습하고 연습하고 또 연습해야한다. 처음부터 어려운 기능을 만들기 위해 고군분투할 필요 없다. 되려 너무 어려운 과제가 주어지면 동기부여가 꺾일 수 있는 단점이 있다. 내가 겨우 HTML과 CSS를 작성할 수 있을 정도가 됐는데, 갑자기 쇼핑몰이나 블로그 같은 서비스를 만들겠다고 덤비지 말자. HTML, CSS로 완전히 새로운 페이지를 만들어보던가 적당한 사이즈의 내가 충분히 할 수 있는 것보다 한-두 계단 정도 어려운 웹사이트를 골라 클론 코딩해보면 충분하다.\n이는 교육심리학 중 로버트 비요크(Robert Bjork)교수가 제안한 바람직한 어려움(Desirable Difficulty)이란 개념을 활용한 방법이다. 이 개념은 학습 과정에서 겪는 적절한 수준의 도전, 즉 어려움이 학습자의 정보 처리 및 저장 능력을 향상시킬 수 있다는 이론을 중심으로 한다. 너무 쉽지도, 그렇다고 너무 어렵지도 않은 수준의 어려움이 학생들의 학습 효과를 높이는 데 도움이 된다는 것이다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n혼자 연습하는 것 뿐 아니라 다른 사람이 만든 코드를 익히고 적용해보는 것도 필요하다. 요즘은 AI가 있다고는 하지만 추천하지는 않는다. AI가 만드는 코드가 멘토의 역할을 해줄지 모를 뿐더러, 처음 공부를 시작할 때는 족보를 뜯지 말고 스스로 족보를 만드는 능동적 연습이 필요한 지점이기 때문이다. 그런 의미에서 연습이야말로 가장 효과적인 학습 방식이다. 종국에는 DB, 서버, 배포, CI/CD까지 익혀 서비스 구현/배포의 플로우를 혼자서 다 할 수 있는 정도까지 도달해야 한다고 본다. 모든 것에 전문가가 될 필요는 없지만 어느정도는 익혀놔야 후에 협업을 할때에도 커뮤니케이션에 무리가 없으며, 알고 있는 것과 모르는 것의 차이로 인해 벌어지는 사고 넓이가 다르기 때문이다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n궁극적으로 DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 성장해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n혼자 프로젝트를 만들고 배포하면 자연스럽게 테스트 코드, 폴더 구조, 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n궁극적으로 DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 성장해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n혼자 프로젝트를 만들고 배포하면 자연스럽게 테스트 코드, 폴더 구조, 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n궁극적으로 DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 성장해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n혼자 프로젝트를 만들고 배포하면 자연스럽게 테스트 코드, 폴더 구조, 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n궁극적으로 DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 성장해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 자연스럽게 코드 작성 능력을 키울 수 있다. 계속된 프로젝트를 테스트 코드, 폴더 구조, 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n궁극적으로 DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 성장해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 계속된 프로젝트를 테스트 코드, 폴더 구조, 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n궁극적으로 DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 성장해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다.\n테스트 코드, 폴더 구조, 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n궁극적으로 DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 성장해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 더 나아가면 테스트 코드, 폴더 구조, 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n궁극적으로 DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 성장해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n궁극적으로 DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n개인적인 의견으로, DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n개인적인 의견으로, DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n개인적인 의견으로, DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\n궁극적으로 DB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 그런 과정을 겪으면 다양한 사례를 만나게 된다.\n서비스의 첫 랜딩이 너무 느려 성능 최적화 방법을 찾는다. 어디서 발생한지 모르는 버그를 디버깅하느라 밤을 샌다. 기능을 추가하다 보니 복잡해진 스파게티 코드를 어떻게 하면 깔끔하게 짤 수 있을지 고민한다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 그런 과정을 겪으면 다양한 사례를 만나게 된다.\n서비스의 첫 랜딩이 너무 느려 성능 최적화 방법을 찾는다. 어디서 발생한지 모르는 버그를 디버깅하느라 밤을 샌다. 기능을 추가하다 보니 복잡해진 스파게티 코드를 어떻게 하면 깔끔하게 짤 수 있을지 고민한다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 그런 과정을 겪으면 다양한 고민을 만나게 된다.\n서비스의 첫 랜딩이 너무 느려 성능 최적화 방법을 찾는다. 어디서 발생한지 모르는 버그를 디버깅하느라 밤을 샌다. 기능을 추가하다 보니 복잡해진 스파게티 코드를 어떻게 하면 깔끔하게 짤 수 있을지 고민한다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느려 성능 최적화 방법을 찾는다. 어디서 발생한지 모르는 버그를 디버깅하느라 밤을 샌다. 기능을 추가하다 보니 복잡해진 스파게티 코드를 어떻게 하면 깔끔하게 짤 수 있을지 고민한다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 어디서 발생했는지 자꾸만 버그가 터진다. 기능을 추가하다 보니 복잡해진 스파게티 코드를 어떻게 하면 깔끔하게 짤 수 있을지 고민한다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 어디서 발생했는지 자꾸만 버그가 터진다. 기능을 추가하다 보니 코드가 한 파일에 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 커밋이 정리되지 않고 무의하다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 어디서 발생했는지 자꾸만 버그가 터진다. 기능을 추가하다 보니 코드가 한 파일에 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 무의하고 정리되지 않는다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 어디서 발생했는지 자꾸만 버그가 터진다. 기능을 추가하다 보니 코드가 한 파일에 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 어디서 발생했는지 자꾸만 버그가 터진다. 기능을 추가하다 보니 코드가 한 파일에 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 어디서 발생했는지 자꾸만 버그가 터진다. 기능을 추가하다 보니 코드가 한 파일에 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 어디서 발생했는지 모르겠는 버그가 자꾸 터진다. 기능을 추가하다 보니 코드가 한 파일에 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 코드가 한 파일에 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 성능 최적화, 다양한 기능 구현 경험을 쌓게 된다. 이 과정에서 자신만의 코드 철학이 생기고, 그 철학이 경쟁력의 핵심이 된다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 핵심 경쟁력이 된다.\nAI가 있어도 연습이 필요한 이유다. AI는 0에서 90은 만들어주지만, 마지막 10의 디테일은 사람이 해야 한다. 또 0에서 90을 만들 과정도 사람이 지시해야 신뢰할 수 있는 결과가 나온다. 결국 연습이 AI 활용 능력과 프론트엔드 경쟁력 모두를 높인다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 핵심 경쟁력이 된다.\nAI가 있어도 연습은 필요하다. AI는 0에서 90은 만들어주지만, 마지막 10의 디테일은 사람이 해야 한다. 또 0에서 90을 만들 과정도 사람이 지시해야 신뢰할 수 있는 결과가 나온다. 결국 연습이 AI 활용 능력과 프론트엔드 경쟁력 모두를 높인다.\n혼자 프로젝트를 만들고 배포까지 해보는 경험이 수반되면 자연스럽게 안정성을 위한 테스트 코드를 작성하고자 생각이 들고, 효과적으로 유지보수하기 위해 폴더 구조 등 아키텍처를 생각한다. 그리고 느린 성능을 최적화해보고 다양한 기능을 실제로 구현해보는 경험을 쌓을 수 있다. 이런 경험이 쌓이면서 코드에 대한 본인의 철학이 생기고 그 철학이 다른 이와 구분짓는 중요한 역할을 한다. AI가 있는데 굳이 그럴 필요가 있는가? 물론이다. AI는 0에서 90은 잘 만들테지만 나머지 10에 대한 디테일은 결국 사람이 해야한다. 또 0에서 90을 만드는 과정도 사람이 구체적으로 지시해야만 신뢰할 결과를 얻을 수 있다. 결과적으로 연습이야 말로 AI를 잘 사용하는 데 도움이 되고, 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 핵심 경쟁력이 된다. 프론트엔드 개발자로서 당신이 다른 이들보다 경쟁력 있는 사람이 될 수 있다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다.\n비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다.\n비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야 했다. 웹뷰를 개발하며 네이티브 언어까지 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 결국 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 결국 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n비전공자가 맞이하는 개발의 세상이 망망대해와 같아서 자칫하면 길을 잃기 마련이다. 누구는 CS가 중요하다고 한다. 누구는 알고리즘을 해야 한다고 하며, 누구는 React뿐만 아니라 Vue도 배워놔야 한다고 한다. 누구는 TDD를 하지 않으면 개발자가 아니라고 한다. 누구는 OOP가 중요하니 배워야한다고 말한다. 누구는 웹접근성도 배워야한다고 한다. 거인의 어깨 위에 올라타라고 디자인 패턴도 배우라고 한다. 자극적인 타이틀로 유혹하고 있는 노이즈 같지만서도 정말 배워 놓으면 좋은 건 맞다. 하지만 언제나 우리에게 시간은 제한적이다. 그리고 지식을 담을 뇌의 용량도 제한적이다. 그러므로 우선순위가 중요하다.\n처음 개발을 시작할 때 나는 모든 것을 다 해야 뒤쳐지지 않을 것이라 느꼈다. React를 알고 있으니 Vue나 Anguler도 알아야 할 것 같고, Svelt도 배워야할 거 같았다. 웹뷰를 개발하면서는 네이티브 언어를 배워 앱의 동작 방식과 구현 방식에 대해서도 깊이 이해해야 할 것이라 여겼다. 알고리즘도 알아야 하고, 디자인 패턴도 모두 익혀야하고 OOP도 이야기 가능하게 깎아야 한다고 생각했다. 그러나 모든 걸 동시에 하려 하니 결국 아무것도 제대로 배우지 못했다. 그때 깨달았다. 중요한 건 무엇을 먼저 집중할 것인가다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 결국 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 필요한 건 전략적 선택이다. 서비스 개발이 재미있다면 구현 능력에 집중하고, 알고리즘은 기본만 익혀도 충분하다.\n알고리즘과 구현 능력. 둘 다 중요하지만, 제한된 시간에 둘 다 잘하기는 어렵다. 하나만 선택하라. 나는 구현 능력을 택했고, 알고리즘은 기본만 익혔다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 서비스 개발이 재미있다면 구현 능력에 집중하고, 알고리즘은 기본만 익혀도 충분하다.\n알고리즘과 구현 능력. 둘 다 중요하지만, 제한된 시간에 둘 다 잘하기는 어렵다. 하나만 선택하라. 나는 구현 능력을 택했고, 알고리즘은 기본만 익혔다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 그래서 알고리즘은 기본 밖에 모른다.\n하나만 선택하라. 나는 구현 능력을 택했고, 알고리즘은 기본만 익혔다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 그래서 알고리즘은 기본 밖에 모른다.\n하나만 선택하라. 나는 구현 능력을 택했고, 알고리즘은 기본만 익혔다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 그래서 알고리즘은 기본 밖에 모른다.\n알고리즘은 중요하지만 하나만 선택하라. 나는 구현 능력을 택했고, 알고리즘은 기본만 익혔다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 그래서 알고리즘은 기본 밖에 모른다.\n알고리즘은 중요하지만 하나만 선택하라. 나는 구현 능력을 택했고, 알고리즘은 기본만 익혔다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 하그래서 알고리즘은 기본 밖에 모른다.\n알고리즘은 중요하지만 하나만 선택하라. 나는 구현 능력을 택했고, 알고리즘은 기본만 익혔다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다.\n그래서 알고리즘은 기본 밖에 모른다.\n알고리즘은 중요하지만 하나만 선택하라. 나는 구현 능력을 택했고, 알고리즘은 기본만 익혔다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자하면 된다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자하면 된다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 공부하면 된다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n필수적으로 함양해야할 능력을 생각해보자. 이건 내가 특정 지을 수 있는 요소는 아니다. 사람 나름대로 맞는 깔이 있어서 누군가에겐 이게 중요하다고 여겨지는 부분이 있기 마련이다. 대표적으로 알고리즘과 구현 능력이다. 실로 둘 다 중요하다. 하지만 제한된 시간 아래 둘 다 잘하게 되려면 만고의 노력이 필요하다. 하나만 취사선택하라. 나는 구현 능력을 택했고 알고리즘에 대한 공부는 시간복잡도, 공간복잡도처럼 아주 기초적인 것만 했다. 중요한 건 이 포커싱이 하나를 포기하는 행위가 되어서는 안된다. 마치 수학이 싫어 문과로 전향하게 되는 것처럼 말이다. 결국은 모두 필요하지만 나에게 있어 이것이 효율적인 선택이기 때문에 결정한 전략이어야 한다. 서비스를 만드는 행위가 재미있다면 구현 능력을 좀 더 뾰족하게 세워서 취업을 준비하는 게 더 전략적이다. 나도 그렇게 했다. 요즘은 알고리즘을 보지 않도 실무 과제 전형만 보는 곳도 많기 때문이다. 알고리즘 풀이가 재밌다면 알고리즘 테스트 능력을 키워 취업을 준비하면 된다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n모노레포 구현해보기, 1일 1 잔디 심기, TIL 매일 블로그 올리기 등 남이 하니 나도 해야겠다 생각해 활동하는 시간 소모는 불필요하다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n모노레포 구현해보기, 1일 1 잔디 심기, TIL 매일 블로그 올리기 등 남이 하니 나도 해야겠다 생각해 활동하는 시간 소모는 불필요한 소모다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n모노레포 구현해보기, 1일 1 잔디 심기, TIL 매일 블로그 올리기 등 남이 하니 나도 해야겠다 생각해 활동하는 건 불필요한 소모다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n모노레포 구현해보기, 1일 1 잔디 심기, TIL 매일 블로그 올리기 등 남이 하니 나도 해야겠다 생각해 활동하는 건 불필요한 시간 소모다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n모노레포 구현해보기, 1일 1 잔디 심기, TIL 매일 블로그 올리기 등 남이 하니 나도 해야겠다 생각해 활동하는 건 불필요한 시간 소모다. 시간은 제한적이다. 그 시간에\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n모노레포 구현해보기, 1일 1 잔디 심기, TIL 매일 블로그 올리기 등 남이 하니 나도 해야겠다 생각해 활동하는 건 불필요한 시간 소모다. 시간은 제한적이다. 그 시간에\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 생각만큼 무서운 생각은 없다. 목적없이 항해하는 배가 될\n모노레포 구현해보기, 1일 1 잔디 심기, TIL 매일 블로그 올리기 등 남이 하니 나도 해야겠다 생각해 활동하는 건 불필요한 시간 소모다. 시간은 제한적이다. 그 시간에\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 생각만큼 무서운 생각은 없다. 목적없이 항해하는 배가 될 뿐이다.\n모노레포 구현해보기, 1일 1 잔디 심기, TIL 매일 블로그 올리기 등 남이 하니 나도 해야겠다 생각해 활동하는 건 불필요한 시간 소모다. 시간은 제한적이다. 그 시간에\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 생각이다. 목적없이 항해하는 배가 될 뿐이다.\n모노레포 구현해보기, 1일 1 잔디 심기, TIL 매일 블로그 올리기 등 남이 하니 나도 해야겠다 생각해 활동하는 건 불필요한 시간 소모다. 시간은 제한적이다. 그 시간에\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다.\n모노레포 구현해보기, 1일 1 잔디 심기, TIL 매일 블로그 올리기 등 남이 하니 나도 해야겠다 생각해 활동하는 건 불필요한 시간 소모다. 시간은 제한적이다. 그 시간에\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다.\n모노레포 구현해보기, 1일 1 잔디 심기, TIL 매일 블로그 올리기 등 남이 하니 나도 해야겠다 생각해 활동하는 건 불필요한 시간 소모다. 시간은 제한적이다. 그 시간에\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다.\n개발 기술의 목적은 그 이하 그 이상도 아니기 때문이다. 코드와 제품 퀄리티를 올리는 일이다. 결국 면접에서 보는 것도 그것이다. 기술 스택을 각각 어느정도 할 수 있는지 어빌리티를 보는게 아니라 그 기능을 이해하고 코드와 제품 퀄리티에 있어 선택한 이유에 대해 사고하는 능력을 보는 것이다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 보는 것이다.\n조심스럽지만 모노레포나 1일 1잔디, TIL 같은 블로깅, 유명 라이브러리에 컨트리뷰터를 하는 건 불필요한 시간 소모라고 본다. 남이 한다고 한다? 이건 경쟁력을 잃게 만드는 요인이다. 하면 좋지만 시간은 제한적이란 걸 명심하라. 게다가 시간이 아무리 많아도 모든 걸 완벽하게 잘하기란 불가능하다. 이걸 할 시간에 (알고리즘을 취업 전략으로 짰다고 한들) 새로운 서비스를 혼자 만들어보는 게 더 좋다. 코드와 제품 퀄리티에 집중하는 게 무엇보다 중요하다. 새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n개발자라면, 기술 스택보다 그것으로 코드를 만들고 제품 퀄리티를 높이는 능력에 집중하라. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하라. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하라. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하라. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다. 변하지 않는 진리다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 시험과 자격증 중심의 우리나라 환경과 달리, 개발은 실무적 영역 중심이다.\n시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다.\n시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다.\n시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n시험과 자격증이 취업의 대부분 과정인 우리나라 현실과 달리 개발은 실무적 영역을 8할 이상 보므로 더 어려운 생태계다. 그 덕에 기회는 많다. 실력이 있다면 그 실력을 발휘할 수 있는 무대가 언제든 펼쳐지기 때문이다. 반대로 그것이 처음 시작하는 이의 발목을 잡는다. 대체 어느정도까지 하는게 맞는것인지? 이정도면 됐다 수준이 있는지? 100점 만점에 80점 이상 합격이라는 커트 라인이 없기 때문이다. 시험 범위도 없으니 통곡할 따름이다. 유명한 프론트엔드 로드맵이 존재하긴 하지만, 결국 이것도 기술 스택에 대한 이야기다. 이 기술 스택을 가지고 내가 어느정도까지 하면 체크를 할 수 있는지? 적당한 채점 기준이 없다.\n내가 생각하길, 서비스 코드를 작성하는 일이 가장 중요한 업무인 개발자 입장에서 기술 스택을 어떤 걸 어느정도까지 이해했느냐보다, 그 기술을 조합해 코드와 제품 퀄리티를 높이게 만드는 일을 목표로 달리면 된다. React로 좋은 제품을 만든 사람은, Next로도 좋은 제품을 만든다. 동시에 TypeScript로 좋은 제품을 만든 사람은, 다른 언어로도 예를들어 Python으로도 좋은 제품을 만들 수 있다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다. 개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다.\n개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n개인적 의견이지만 그 시간에 차라리 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력, 서비스의 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 착각하는 게, 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 서비스 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 적재적소에 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높이는 사고 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높이는 능력을 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가\u001f 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n변하지 않는 진리는 이렇다. 코드와 제품 퀄리티에 집중하라. 그리고 연습 또 연습하라. 포기하고 싶을땐 합리화 하지 마라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 검퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않기 때문이다. 강의 따라 코드를 작성하다 혼자 작성하려면 아무런 타이핑을 하지 못하는 나 자신에 때때로 자괴감, 무력감도 느낀다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다는 것이다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 완전한 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 이건 이론이 아니라 실무의 영역이다. 그래서 공부하기 까다롭고 어렵다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현/배포할 수 있을 정도까지 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도\u001d 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 아무것도 제대로 배우지 못했다. 공부하지 않고 있다는 나를 채찍질하는 모습만 남아있었다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋겠지만 Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have가 아니라 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 떄문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 하지만 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있어야 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"\u003cp\u003e비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\u003c/p\u003e","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"hi","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는 질 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기가 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋을 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋 푸시하니 대부분이 무의미하고 정리되지 않는다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋 푸시하니 대부분이 무의미하고 정리되지 않아 히스토리 파악이 힘들다. 협업 시 중구난방 스타일로 개발해서 서로가 작업한 게 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋 푸시하니 대부분이 무의미하고 정리되지 않아 히스토리 파악이 힘들다. 협업 시 중구난방 스타일로 개발해서 본인 작업이 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n선택은 포기 행위가 되어서는 안 된다. 수학이 싫어 문과로 전향하는 것처럼, 단순 회피가 되어선 안 된다. 전략적 선택이어야 한다. 내 예를 들면 나는 알고리즘과 구현 능력 중 제한된 시간에 둘 다 잘하기는 어렵다 판단해서 구현 능력을 택했다. 알고리즘을 공부할 시간을 새로운 프로젝트를 만들어보고 프론트엔드가 사용하는 기술을 이해하는 데 사용했다. 알고리즘은 기본만 익혔다. 알고리즘이 필요한 시기가 오면 알고리즘에 시간을 투자해 능력을 키우면 된다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n만약 비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋 푸시하니 대부분이 무의미하고 정리되지 않아 히스토리 파악이 힘들다. 협업 시 중구난방 스타일로 개발해서 본인 작업이 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋 푸시하니 대부분이 무의미하고 정리되지 않아 히스토리 파악이 힘들다. 협업 시 중구난방 스타일로 개발해서 본인 작업이 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"포기하고 싶을땐 합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋 푸시하니 대부분이 무의미하고 정리되지 않아 히스토리 파악이 힘들다. 협업 시 중구난방 스타일로 개발해서 본인 작업이 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋 푸시하니 대부분이 무의미하고 정리되지 않아 히스토리 파악이 힘들다. 협업 시 중구난방 스타일로 개발해서 본인 작업이 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋 푸시하니 대부분이 무의미하고 정리되지 않아 히스토리 파악이 힘들다. 협업 시 중구난방 스타일로 개발해서 본인 작업이 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면 명심해야할 3가지"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋 푸시하니 대부분이 무의미하고 정리되지 않아 히스토리 파악이 힘들다. 협업 시 중구난방 스타일로 개발해서 본인 작업이 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4/","summary":"합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면 명심할 3가지"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋 푸시하니 대부분이 무의미하고 정리되지 않아 히스토리 파악이 힘들다. 협업 시 중구난방 스타일로 개발해서 본인 작업이 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4-%EB%AA%85%EC%8B%AC%ED%95%A0-3%EA%B0%80%EC%A7%80/","summary":"합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면 명심할 3가지"},{"content":"비전공자로서 프론트엔드 개발자가 되기로 결심한 당신. 프론트엔드 생태계에서 비전공자와 전공자는 정말 차이가 있을까? 진리의 \u0026lsquo;사바사\u0026rsquo;겠지만, 현실을 바라보면 분명 차이가 존재한다.\n잠깐, 프론트엔드는 전공자 여부가 그렇게 중요하지 않다고? 임베디드, 하드웨어, 백엔드에 비하면 중요도가 낮은 건 사실이다. 그렇다고 중요하지 않은 건 아니다. 네트워크, 컴퓨터 구조, 알고리즘, 운영체제, 소프트웨어 공학 같은 지식이 있느냐 없느냐는 협업 단계나 개발 진행에서 차이를 만든다.\n비전공자가 컴퓨터 공학에 대해 일가견이 있는 경우라면 몰라도 일반적인 상황에서 전공자보다 관련 지식 수준이 낮을 수밖에 없다. 이건 자연스러운 현상이다. 전공자는 4년 동안 배우면서 익힌 \u0026lsquo;기본값\u0026rsquo;을 갖고있기 때문이다.\n하지만 경력이 쌓이면 격차는 줄어든다. 시간이 지나면 전공 여부는 중요하지 않다는 걸 깨닫는다. 오히려 개발에 대한 열정, 문제 해결 능력, 사고 방식이 더 중요하다. 그러나 지금, 당신은 전공자와 4년 차이를 두고 같은 그라운드에 선 주니어다.\n하지만 포기할 필요는 없다. 나 역시 비전공자로 개발을 업으로 삼았다. 컴퓨터 관련 지식이 거의 없었지만 취업에도 성공했고 업무 수행도 큰 문제를 겪지 않는다. 주위 개발자 중에도 전공자가 아닌 사람이 많다. 혹시 비전공자라는 이유로 개발자가 되길 망설인다면 그러지말라고 싶다.\n합리화 금지 10km 마라톤 대회에 친구와 나간 적이 있다. 나에게는 두번째 대회였다. 첫번째 대회 기록은 56분 47초. 두번째 대회에서는 기록 단축을 목표로 55분 언더를 노렸다. 내 기록은 50분 27초였다. 정말 죽을 힘을 다해 달렸다.\n달리는 동안 한 가지 깨달은 게 있다. 인간은 포기하고 싶고 힘들때 자기 합리화를 통해 스스로 타협하도록 유도한다. 7km 지점, 숨이 턱 끝까지 차올랐다. 그러자 머릿속에서 끊임없이 변명거리가 튀어나왔다.\n앞에 사람이 많아서 속도를 못 낸다. 배가 조금 아픈데 속도를 늦춰야겠다. 이미 55분 언더로 들어갈텐데 천천히 달릴까? 옆에 같이 뛰던 친구가 부추겼다. \u0026ldquo;빨리 달려, 할 수 있어.\u0026rdquo; 죽을 것 같았지만 이를 악물었다. 그리고 다시 뛰었고 완주했다.\n여기서 합리화의 위험을 느꼈다. 충분히 할 수 있는 능력이 있어도, 스스로 타협하면 거기서 멈추게 된다. 명심하라. 스스로 타협하지 말아야 한다.\n비전공자가 개발을 처음 시작하면 낯선 개념이 많다. 컴퓨터공학(CS) 지식, 알고리즘, 실제 코드를 작성하는 일 조차 괴롭다. 처음에 숨이 턱 막히는 경험을 한다. 도무지 이해되지 않는다. 강의를 따라 코드를 치다가, 혼자 작성하려 하면 손이 멈춘다. 그럴 때면 자괴감과 무력감이 밀려온다.\n다른 사람들은 저렇게 잘 하는데 왜 나는 안될까? 전공자와 격차를 어떻게 좁히지. 계산기도 구현 못하는데 개발자를 할 수 있을까? 여기서 동기부여 받고 정진한다면 다행이다. 하지만 괴로움에 질려 포기하려 한다면 명심해야한다. 마라톤이 그렇듯 공부도 그렇다. 괴로움으로 도망치지 마라. 자신이 생각하는 것보다 더 큰 능력이 있다. 이 악물고 뛰면 결국 완주한다.\n연습 또 연습 CS, 알고리즘은 필수 소양이다. 하지만 현업에서 가장 중요한 건 따로 있다. 바로 코드를 작성하는 일이다.\n\u0026lsquo;코드를 작성한다\u0026rsquo;란 무엇인가?\n기존 코드 수정과 변경 서비스에 기능 추가 안정된 서비스를 위한 에러핸들링/테스트 작성 더 나가면 컨벤션과 구조 설계 등 아키텍처도 코드 작성의 일환이다.\n내 경험상, 이 일은 가장 중요한 일이다. 하지만 공부하기 까다롭고 어렵다. 이건 이론이 아니라 실무의 영역이기 때문이다. CS는 개념이다. 알고리즘은 수학과 가깝다. 문제 해결 방식에 대한 학문적 공부다. 코드 작성은 기술의 영역이다. 문제 하나에 다층적 문제가 내포되어 있다.\n코드 작성 능력을 키우려면 어떻게 해야할까? 매우 진부하지만 답은 연습, 또 연습, 그리고 더 연습이다. 처음부터 어려운 기능을 만들려하지 마라. 너무 어려운 과제는 동기부여를 꺾는다. HTML, CSS 정도만 할 수 있는데 갑자기 쇼핑몰, 블로그를 만들려 덤비지 말라. HTML, CSS로 완전히 새로운 페이지를 만들어보거나, 한두 단계 어렵지만 할 수 있는 웹사이트를 클론 코딩하면 충분하다.\n교육심리학자 로버트 비요크(Robert Bjork)는 이를 ‘바람직한 어려움(Desirable Difficulty)’이라 불렀다. 학습 과정에서 적절한 도전은 정보 처리와 기억 능력을 향상시킨다. 너무 쉽지도, 너무 어렵지도 않은 수준이 학습 효과를 높인다.\nDB, 서버, 배포, CI/CD까지 혼자 구현하고 배포할 수 있을 정도로 도달해야 한다. 모든 걸 전문가 수준으로 익힐 필요는 없다. 혼자서도 기본적인 흐름을 이해하고, 작은 프로젝트를 직접 배포할 수 있을 정도면 충분하다. 기본적인 이해가 있으면 협업 시 커뮤니케이션이 원활하고, 알고 있는 것과 모르는 것의 차이로 벌어지는 사고 폭도 달라진다.\n여러번 프로젝트를 만들고 배포하면 코드 작성 능력을 자연스럽게 키울 수 있다. 동시에 다양한 고민도 만나게 된다.\n서비스의 첫 랜딩이 너무 느리다. 내가 배포한 사이트에 내 도메인을 연결시키고 싶다. 사용자가 버그가 터졌다는데 정작 나는 어디서 터지는지 모르겠다. 기능을 추가하다 보니 한 파일에 코드가 천 줄이 넘어가서 보기 힘들다. 매번 main으로 커밋 푸시하니 대부분이 무의미하고 정리되지 않아 히스토리 파악이 힘들다. 협업 시 중구난방 스타일로 개발해서 본인 작업이 아니면 잘 쳐다보지 않는다. \u0026hellip; 이런 고민을 하나씩 부셔가면 자신만의 해결책이 생기고 철학이 만들어진다. 이 철학은 여러분이 프론트엔드 개발자로서 가지는 경쟁력 중 하나가 된다.\n포커싱 비전공자가 마주하는 개발 세계는 망망대해와 같다. 누군가는 CS가 중요하다고 하고, 누군가는 알고리즘을 해야 한다고 하며, 또 다른 이는 React뿐 아니라 Vue까지 배워야 한다고 말한다. TDD, OOP, 웹 접근성, 디자인 패턴까지. 정보가 넘쳐난다. 하지만 시간은 제한적이다. 그리고 뇌 용량도 제한적이다. 우선순위를 정하고 집중해야 한다.\n처음 개발을 시작할때 나도 모든 것을 하려 했다. React를 알았으니 Vue, Angular도 배워야 하고, Svelte도 배워야한다고 생각했다. 웹뷰를 개발하니 네이티브 언어를 배워야 할 것 같았다. 알고리즘, 디자인 패턴, OOP까지. 그러나 모두 배우려다 결국 아무것도 배우지 못했다. 공부하지 않는 자신만 채찍질했다. 그때 깨달았다. 중요한 건 무엇에 집중할지 선택하는 것이다.\n남이 하니 나도 해야겠다는 건 좋지 못한 생각이다. 목적없이 항해하는 배가 될 뿐이다. 예를들면 1일 1잔디 심기, 매일 TIL 블로그 올리기가 그렇다. 하면 좋지만, Good to have보다 Must have를 우선 챙겨야한다. 시간은 제한적이다.\n내 생각이지만, 대부분의 시간을 새로운 서비스를 만들고 코드와 제품 퀄리티에 집중하는 게 좋다 생각한다. 개발의 목적은 서비스 구현 그 이하 그 이상도 아니기 때문이다. 서비스를 만드는 능력과 퀄리티를 높이는 능력이 가장 중요하다. 기술 스택도 그렇다. 시장은 당신이 기술 스택을 어느정도 할 수 있는지에 대한 어빌리티를 보는게 아니라, 그 기술을 이용해 적절한 의사결정을 수행하고, 구현 시 활용하여 코드와 제품 퀄리티를 높일 수 있는가를 본다.\n무엇에 포커싱하는게 좋을지 몰라 고민 중이라면, 제품을 만들고 제품 퀄리티를 높이는 능력에 집중하자. React로 좋은 제품을 만들 수 있다면, Next.js도 만들 수 있다. TypeScript로 좋은 제품을 만들 수 있다면, Python으로도 좋은 제품을 만들 수 있다.\n새로운 시작은 언제나 어렵다. 특히 개발은 더 어렵다. 실무 영역을 중시하므로, 시험과 자격증 중심의 우리나라 환경과 다르기 때문이다. 그 덕에 기회의 문은 열려있다. 실력이 있다면 무대는 언제든 열린다. 반대로 처음 시작하는 사람에게는 어렵다. 어느정도까지 하면 되는지 기준이 없다.\n합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라. 만약 정하지 못하겠다면 우선 코드와 제품 퀄리티에 집중하라. 당신이 개발자가 되기로 결심했다면 이 세가지를 기억하길 바란다.\n","permalink":"http://localhost:1313/posts/%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90%EC%9D%B8-%EB%8B%B9%EC%8B%A0-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EB%A1%9C-%EA%B2%B0%EC%8B%AC%ED%96%88%EB%8B%A4%EB%A9%B4-%EB%AA%85%EC%8B%AC%ED%95%A0-3%EA%B0%80%EC%A7%80/","summary":"합리화 하지 마라, 연습하고 또 연습하라. 우선순위를 정하고 거기에 집중하라.","title":"비전공자인 당신, 프론트엔드 개발자가 되기로 결심했다면 명심할 3가지"}]